[["ch2.html", "Chapter 2    2.1    (fpp3 1.6) 2.2    2.3      2.4  1.   (White Noise) 2.5  2.   (Random Walk) 2.6  3.   (Moving Average) 2.7  (Stationarity)", " Chapter 2    2.1    (fpp3 1.6)    5  . 2.1.1 1.           .    , 1.     , 2.    , 3.          .    ,  ,        . 2.1.2 2.                . ,           .    (Judgmental forecasting) . (fpp3 Chapter 6).           .       . ,          .    . 2.1.3 3.        .   ?   ?  ?    ?      ?     ? 2.1.4 4.         ,     ,     . 2 ~ 3     .        ,       . fpp3     . Regression Model Exponential Smoothing Methods Box-Jenkins ARIMA models Dynamic regression model Hierarchical forecasting Neural networks and vector autoregression 2.1.5 5.         ,     .         .        .       , Missing Value  Outlier ,       . 2.2     fpp3     . fpp3   tsibble, feasts,  fable       . library(fpp3) library(dplyr) library(ggplot2)      30   vic_elec  2012      . vic_elec %&gt;% janitor::clean_names() %&gt;% filter(year(time) == 2012) %&gt;% gg_season(demand, period = &quot;day&quot;) + theme(legend.position = &quot;none&quot;) + labs(y=&quot;MWh&quot;, title=&quot;Electricity demand: Victoria&quot;)      0 23 30  48    365     . 2.3      2.3.1  (Stochastic Process) \\(\\{Y_t: t = 0, \\pm 1 , \\pm 2, \\pm 3, \\dots \\}\\)     ,       .     , ,     . 2.3.2  (Mean Function)    . \\(\\mu_t = \\rm{E} [\\it Y_t \\rm ] \\quad for \\quad t = 0, \\pm1, \\pm2, \\dots\\)  \\(\\mu_t\\) \\(t\\) ,  time point \\(t\\)    . 2.3.3   (Autocovariance function)     . \\(\\gamma_{t, s} = \\rm{Cov} (\\it Y_t, Y_s \\rm ) \\quad for \\quad t, s = 0, \\pm1, \\pm2, \\dots\\) \\(\\rm{Cov} (\\it Y_t, Y_s \\rm ) = \\rm{E} [(Y_t - \\mu_t)(Y_t - \\mu_s) \\rm ]\\) 2.3.4  (Autocorrelation function)    . \\(\\rho_{t, s} = \\rm{Corr} (\\it Y_t, Y_s \\rm ) \\quad for \\quad t, s = 0, \\pm1, \\pm2, \\dots\\) \\(\\rm{Corr} (\\it Y_t, Y_s \\rm ) = \\cfrac{Cov(\\it Y_t, Y_s \\rm )}{\\sqrt{Var(Y_t)}\\sqrt{Var(Y_s)}}\\)   2.4  1.   (White Noise)  ? \\(\\{e_t = e_1, e_2, \\dots \\}\\)        ,  0,  \\(\\sigma_e^2\\) .    (White Noise) . \\(\\{Y_t = e_t: t = 1 , 2, 3, \\dots \\} \\\\ \\mu_t = E[Y_t] = E[e_t] = 0 \\\\ Var(Y_t) = Var(e_t) = \\sigma_e^2 \\\\ Cov(Y_t, Y_s) = Cov(e_t, e_s) = 0 \\quad \\rm{for} \\quad t \\neq s \\\\ Corr(Y_t, Y_s) = Corr(e_t, e_s) = 0 \\quad \\rm{for} \\quad t \\neq s\\)     ,  0 .     white.noise &lt;- tsibble(t = seq_len(24), y = rnorm(24), index = t) white.noise %&gt;% autoplot() N &lt;- 100 df.wn &lt;- data.frame(ind = integer(), t = integer(), y = double()) for (i in seq(N)){ white.noise &lt;- tsibble(t = seq_len(24), y = rnorm(24), index = t) white.noise &lt;- white.noise %&gt;% mutate(ind = i) %&gt;% select(ind, t, y) %&gt;% as.data.frame() df.wn &lt;- df.wn %&gt;% bind_rows(white.noise) } df.wn$ind &lt;- df.wn$ind %&gt;% as.factor() # One sample ggplot(df.wn %&gt;% filter(ind == &quot;1&quot;), aes(x = t, y = y, col = ind)) + geom_line() # Distribution ggplot(df.wn, aes(x = t, y = y, col = ind)) + geom_line() + theme(legend.position=&quot;none&quot;) 2.5  2.   (Random Walk)     . \\(t\\)  \\(t-1\\)      . \\(\\{Y_1 = e_1, \\quad Y_t = Y_{t-1} + e_t: t = 2, 3, \\dots \\} \\\\ \\mu_t = E[Y_t] = E[Y_{t-1}] + E[e_t] = \\mu_{t-1} + 0 = \\mu_{t-1} = \\cdots = \\mu_1 = 0 \\\\ Var(Y_t) = Var(Y_{t-1}) + Var(e_t) = Var(Y_{t-1}) + \\sigma_e^2 = \\cdots = t \\sigma_e^2 \\\\ Cov(Y_t, Y_s) = Cov(Y_s + e_{s+1} + \\cdots + e_t, Y_s) = Cov(Y_s, Y_s) = Var(Y_s) = s \\sigma_e^2 \\quad \\rm{for} \\quad t &gt; s \\\\ Corr( Y_t, Y_s) = \\cfrac{Cov(\\it Y_t, Y_s \\rm )}{\\sqrt{Var(Y_t)}\\sqrt{Var(Y_s)}} = \\cfrac{s\\sigma_e^2}{\\sqrt{t \\sigma_e^2}\\sqrt{s \\sigma_e^2}} = \\sqrt{\\cfrac{s}{t}} \\quad \\rm{for} \\quad t &gt; s\\)       0,  \\(t\\)       . N &lt;- 100 df.rw &lt;- data.frame(ind = integer(), t = integer(), y = double()) for (i in seq(N)){ random.walk &lt;- tsibble(t = seq_len(24), y = cumsum(rnorm(24)), index = t) random.walk &lt;- random.walk %&gt;% mutate(ind = i) %&gt;% select(ind, t, y) %&gt;% as.data.frame() df.rw &lt;- df.rw %&gt;% bind_rows(random.walk) } df.rw$ind &lt;- df.rw$ind %&gt;% as.factor() # One sample ggplot(df.rw %&gt;% filter(ind == &quot;1&quot;), aes(x = t, y = y, col = ind)) + geom_line() # Distribution ggplot(df.rw, aes(x = t, y = y, col = ind)) + geom_line() + theme(legend.position=&quot;none&quot;) 2.6  3.   (Moving Average)     . \\(\\{Y_t = \\frac{1}{2} (e_t + e_{t-1}): t = 2, 3, \\dots \\} \\\\ \\mu_t = E[Y_t] = \\frac{1}{2} (E[e_t] + E[e_{t-1}] = 0 \\\\ Var(Y_t) = \\frac{1}{4} Var(e_t) + \\frac{1}{4} Var(e_{t-1}) = \\frac{1}{4} \\sigma_e^2 + \\frac{1}{4} \\sigma_e^2 = \\frac{1}{2} \\sigma_e^2 \\\\ Cov(Y_t, Y_{t-1}) = Cov(\\frac{1}{2} (e_t + e_{t-1}), \\frac{1}{2} (e_{t-1} + e_{t-2})) = \\cfrac{1}{4}\\sigma_e^2 \\\\ Cov(Y_t, Y_s) = Cov(\\frac{1}{2} (e_t + e_{t-1}), \\frac{1}{2} (e_{s} + e_{s-1})) = 0 \\quad \\rm for \\quad |t-s| &gt; 1 \\\\ Corr(Y_t, Y_t) = 1 \\\\ Corr(Y_t, Y_{t-1}) = 0.5 \\\\ Corr(Y_t, Y_s) = 0 \\quad for \\quad |t-s|&gt;1\\) library(zoo) white.noise &lt;- tsibble(t = seq_len(100), y = rnorm(100), index = t) # moving average with rollmean white.noise.r &lt;- white.noise %&gt;% mutate(yavg = rollmean(y, k = 5, align = &quot;right&quot;, fill = NA )) white.noise.r #&gt; # A tsibble: 100 x 3 [1] #&gt; t y yavg #&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 0.513 NA #&gt; 2 2 0.577 NA #&gt; 3 3 0.259 NA #&gt; 4 4 2.82 NA #&gt; 5 5 -2.43 0.347 #&gt; 6 6 0.0775 0.260 #&gt; 7 7 0.876 0.320 #&gt; 8 8 0.562 0.380 #&gt; 9 9 0.448 -0.0937 #&gt; 10 10 -1.30 0.133 #&gt; # ... with 90 more rows # Mean white.noise &lt;- white.noise %&gt;% mutate(y1 = lag(y, n = 1)) %&gt;% rowwise() %&gt;% mutate(avg = mean(c_across(y:y1), na.rm=TRUE)) white.noise.r %&gt;% ACF(yavg, lag_max = 17) %&gt;% autoplot() 2.7  (Stationarity)            . \\(\\mu_t\\)  ,  \\(t\\) .  \\(\\gamma_{s,t}\\) \\(|s-t|\\) . ,  \\(t\\) .         . # Distribution ggplot(df.wn, aes(x = t, y = y, col = ind)) + geom_line() + theme(legend.position=&quot;none&quot;)         .     \\(t\\)      . # Distribution ggplot(df.rw, aes(x = t, y = y, col = ind)) + geom_line() + theme(legend.position=&quot;none&quot;) "]]
